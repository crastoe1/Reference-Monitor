"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile() :
  def __init__(self,filename,create) :
    try :
      # globals
      mycontext['debug'] = False   
      self.Afn = filename+'.a'
      self.Bfn = filename+'.b'
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      # make the files and add 'SE' to the readat file...
      if create and self.Afile.readat(None,0) == "" :
        self.Afile.writeat('SE',0)
        self.Bfile.writeat('SE',0)      
    except FileInUseError :
      mycontext['debug'] = True

  def writeat(self,data,offset) :
    if isinstance(offset, int) and offset >=0 and isinstance(data,str) :
      #Write the requested data to the B file using the sandbox's writeat call
      self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset) :
    #if self.Afile.readat(bytes,offset) == "" and offset == 0 and bytes <= 0 :
      #self.Afile.writeat('SE',0)
      #self.Bfile.writeat('SE',0)
    return self.Afile.readat(bytes,offset)

  def close(self) :
    Adata = self.Afile.readat(None,0)
    Bdata = self.Bfile.readat(None,0)
    if Adata[0] == "S" and Adata[-1] == "E" and Bdata[0] == "S" and Bdata[-1] == "E" :
      self.Afile.writeat(Bdata,0)
    self.Afile.close()
    self.Bfile.close()
     
def ABopenfile(filename, create) :
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
